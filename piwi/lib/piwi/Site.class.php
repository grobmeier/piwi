<?/** * Renders the requested page and creates the navigation based on 'site.xml'. */class Site {	/** Name of the folder where the content is placed. */	private $contentPath = null;		/** The name of the file containing the site information. */	private $siteFilename;		/** The site definition as xml. */    private $xml;    	/** The id of the requested page. */	private $pageId = null;		/** The template of the requested page. */	private $template = "default.php";		/** The content of the page as DOMDocument. */	private $content;        /** The serialzer. */    private $serializer = null;        // TODO: Refactor this    private $xp = null;   	private $openpath = null;            /**     * Constructor.     * @param string $contentPath Name of the folder where the content is placed.     * @param string $siteFilename The name of the file containing the site information.     * @param string $pageId The id of the requested page.     */    public function __construct($contentPath, $siteFilename = 'site.xml', $pageId) {
    	$this->contentPath = $contentPath;    	$this->siteFilename = $siteFilename;    	$this->pageId = $pageId;    }        /**     * Reads the xml of the requested page.     */    public function readContent() {    	if ($this->pageId == null) {			throw new PiwiException(				"The requested page has not been specified.", 				PiwiException :: ERR_ILLEGAL_STATE);    	}    	    	if ($this->xml == null) {    		$this->loadSite();    	}    	// Lookup pageId        $result = $this->xml->xpath("//page[@id='".$this->pageId."']");        if($result != null) {        	// Load content        	$contentPath = $result[0]['href'];        	        	if (!file_exists($contentPath)) {				throw new PiwiException(					"Could not find the the requested page (Path: '" . $contentPath . "').", 					PiwiException :: ERR_404);    		}        	    	    		$this->content = new DOMDocument;			$this->content->load($contentPath);						// Set template if specified            if($result[0]['template'] != "") {            	$this->template = $result[0]['template'];            }        } else {            throw new PiwiException(				"Could not find the requested page (Page: '" . $this->pageId . "').", 				PiwiException :: ERR_404);        }    }        /**     * Sets the content of the page.     * @param string $content The content as xml.     */    public function setContent($content) {    	$this->content = new DOMDocument;    	$this->content->loadXML($content);    }        /** Transforms the page using the specified serializer */    public function transform() {    	if ($this->content == null) {    		throw new PiwiException(				"The page has not been loaded yet. Invoke method 'readContent' or 'setContent' on '" . __CLASS__ . "' first.", 				PiwiException :: ERR_ILLEGAL_STATE);    	}    	    	$this->serializer = new HTMLSerializer();    	    	    	return $this->serializer->serialize($this->content);    }        /**     * Generates the Navigation.     * @return string The navigation as HTML.     */    public function generateNavigation() {    	if ($this->xml == null) {	    	try {	    		$this->loadSite();	    	} catch( PiwiException $exception ) {				// If this exception occurs the 'site.xml' can not be found.				return "Navigation could not be build. Could not find the site definition file (Path: '" . $this->siteXmlPath . "').";			}    		    	}    	$this->openpath = array();        $xpath = "//page[@id='".$this->pageId."']";        $doc = new DOMDocument();		// TODO: hard coded here        $doc->load($this->contentPath . '/' . $this->siteFilename);                $this->xp = new DOMXPath($doc);        $domNodeList = $this->xp->query($xpath);        $z = 0;        foreach ($domNodeList as $element) {            while($element->nodeName != "site") {                    $this->openpath[$z] = $element->getAttribute("id");                    $z++;                    $element = $element->parentNode;            }        }                $xpath = "/site/page";        $nodelist = $this->xp->query($xpath);        $result = array();        $result = $this->recurse($result, $nodelist, $xpath);                $navigation = new SimpleTextNavigation();                return $navigation->generate($this->contentPath, $result);    }            private function recurse($result, $nodelist, $xpath) {            $i = 0;            foreach ($nodelist as $element) {            	if($element->getAttribute("nav") != "false") {                    $id = $element->getAttribute("id");               		$result[$i]['id'] = $id;	           		$result[$i]['href'] = $element->getAttribute("href");    	       		$result[$i]['label'] = $element->getAttribute("label");           		                   		        	    	if(in_array($id, $this->openpath)) {            	        if($element->hasChildNodes()) {                	        $x2 = $xpath.'/page';                       	    $x3 = $xpath."[@id='".$id."']/*";	                        $n = $this->xp->query($x3);                           $result[$i]['childs'] = $this->recurse(array(), $n, $x2);    	                }        	    	}            		$i++;            	}          	}          	return $result;    }        /**     * Returns the template of the requested page.     * @return string The template of the requested page.     */    public function getTemplate() {    	return $this->template;    }        /**     * Loads the 'site.xml'.     */    private function loadSite() {    	$path = $this->contentPath . '/' . $this->siteFilename;       	if (!file_exists($path)) {			throw new PiwiException(				"Could not find the site definition file (Path: '" . $path . "').", 				PiwiException :: ERR_NO_XML_DEFINITION);    	}    	    	// Load 'site.xml'    	$this->xml = simplexml_load_file($path);	    }}?>